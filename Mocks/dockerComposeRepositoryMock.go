// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/dockerComposePorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerComposeRepository is a mock of DockerComposeRepository interface.
type MockDockerComposeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDockerComposeRepositoryMockRecorder
}

// MockDockerComposeRepositoryMockRecorder is the mock recorder for MockDockerComposeRepository.
type MockDockerComposeRepositoryMockRecorder struct {
	mock *MockDockerComposeRepository
}

// NewMockDockerComposeRepository creates a new mock instance.
func NewMockDockerComposeRepository(ctrl *gomock.Controller) *MockDockerComposeRepository {
	mock := &MockDockerComposeRepository{ctrl: ctrl}
	mock.recorder = &MockDockerComposeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerComposeRepository) EXPECT() *MockDockerComposeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDockerComposeRepository) Create(dockerCompose domain.DockerCompose) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dockerCompose)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDockerComposeRepositoryMockRecorder) Create(dockerCompose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDockerComposeRepository)(nil).Create), dockerCompose)
}

// Delete mocks base method.
func (m *MockDockerComposeRepository) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDockerComposeRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDockerComposeRepository)(nil).Delete), id)
}

// Read mocks base method.
func (m *MockDockerComposeRepository) Read(id string) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDockerComposeRepositoryMockRecorder) Read(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDockerComposeRepository)(nil).Read), id)
}

// ReadAll mocks base method.
func (m *MockDockerComposeRepository) ReadAll(firstItemRank int) ([]domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", firstItemRank)
	ret0, _ := ret[0].([]domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockDockerComposeRepositoryMockRecorder) ReadAll(firstItemRank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockDockerComposeRepository)(nil).ReadAll), firstItemRank)
}

// Update mocks base method.
func (m *MockDockerComposeRepository) Update(dockerCompose domain.DockerCompose) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dockerCompose)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDockerComposeRepositoryMockRecorder) Update(dockerCompose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDockerComposeRepository)(nil).Update), dockerCompose)
}

// MockDockerComposeService is a mock of DockerComposeService interface.
type MockDockerComposeService struct {
	ctrl     *gomock.Controller
	recorder *MockDockerComposeServiceMockRecorder
}

// MockDockerComposeServiceMockRecorder is the mock recorder for MockDockerComposeService.
type MockDockerComposeServiceMockRecorder struct {
	mock *MockDockerComposeService
}

// NewMockDockerComposeService creates a new mock instance.
func NewMockDockerComposeService(ctrl *gomock.Controller) *MockDockerComposeService {
	mock := &MockDockerComposeService{ctrl: ctrl}
	mock.recorder = &MockDockerComposeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerComposeService) EXPECT() *MockDockerComposeServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDockerComposeService) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDockerComposeServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDockerComposeService)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockDockerComposeService) Get(id string) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDockerComposeServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDockerComposeService)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockDockerComposeService) GetAll(firstItemRank int) (int, []domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", firstItemRank)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]domain.DockerCompose)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDockerComposeServiceMockRecorder) GetAll(firstItemRank interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDockerComposeService)(nil).GetAll), firstItemRank)
}

// Patch mocks base method.
func (m *MockDockerComposeService) Patch(dockerCompose domain.DockerCompose) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", dockerCompose)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockDockerComposeServiceMockRecorder) Patch(dockerCompose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockDockerComposeService)(nil).Patch), dockerCompose)
}

// Post mocks base method.
func (m *MockDockerComposeService) Post(dockerCompose domain.DockerCompose) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", dockerCompose)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockDockerComposeServiceMockRecorder) Post(dockerCompose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockDockerComposeService)(nil).Post), dockerCompose)
}
