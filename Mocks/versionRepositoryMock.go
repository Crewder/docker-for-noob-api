// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/versionPorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockVersionRepository is a mock of VersionRepository interface.
type MockVersionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVersionRepositoryMockRecorder
}

// MockVersionRepositoryMockRecorder is the mock recorder for MockVersionRepository.
type MockVersionRepositoryMockRecorder struct {
	mock *MockVersionRepository
}

// NewMockVersionRepository creates a new mock instance.
func NewMockVersionRepository(ctrl *gomock.Controller) *MockVersionRepository {
	mock := &MockVersionRepository{ctrl: ctrl}
	mock.recorder = &MockVersionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionRepository) EXPECT() *MockVersionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockVersionRepository) Create(dockerCompose domain.DockerCompose, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dockerCompose, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockVersionRepositoryMockRecorder) Create(dockerCompose, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVersionRepository)(nil).Create), dockerCompose, userId)
}

// Read mocks base method.
func (m *MockVersionRepository) Read(id, idVersion, userId string) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", id, idVersion, userId)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockVersionRepositoryMockRecorder) Read(id, idVersion, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockVersionRepository)(nil).Read), id, idVersion, userId)
}

// ReadAll mocks base method.
func (m *MockVersionRepository) ReadAll(id, userId string) ([]domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", id, userId)
	ret0, _ := ret[0].([]domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockVersionRepositoryMockRecorder) ReadAll(id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockVersionRepository)(nil).ReadAll), id, userId)
}

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockVersionService) Add(dockerComposeId, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", dockerComposeId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockVersionServiceMockRecorder) Add(dockerComposeId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockVersionService)(nil).Add), dockerComposeId, userId)
}

// Get mocks base method.
func (m *MockVersionService) Get(id, idVersion, userId string) (domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, idVersion, userId)
	ret0, _ := ret[0].(domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVersionServiceMockRecorder) Get(id, idVersion, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVersionService)(nil).Get), id, idVersion, userId)
}

// GetAll mocks base method.
func (m *MockVersionService) GetAll(id, userId string) ([]domain.DockerCompose, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", id, userId)
	ret0, _ := ret[0].([]domain.DockerCompose)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVersionServiceMockRecorder) GetAll(id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVersionService)(nil).GetAll), id, userId)
}
