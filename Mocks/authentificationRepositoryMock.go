// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/authentificationPorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthentificationRepository is a mock of AuthentificationRepository interface.
type MockAuthentificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthentificationRepositoryMockRecorder
}

// MockAuthentificationRepositoryMockRecorder is the mock recorder for MockAuthentificationRepository.
type MockAuthentificationRepositoryMockRecorder struct {
	mock *MockAuthentificationRepository
}

// NewMockAuthentificationRepository creates a new mock instance.
func NewMockAuthentificationRepository(ctrl *gomock.Controller) *MockAuthentificationRepository {
	mock := &MockAuthentificationRepository{ctrl: ctrl}
	mock.recorder = &MockAuthentificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentificationRepository) EXPECT() *MockAuthentificationRepositoryMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthentificationRepository) Login(credentials domain.Credentials) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthentificationRepositoryMockRecorder) Login(credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthentificationRepository)(nil).Login), credentials)
}

// Logout mocks base method.
func (m *MockAuthentificationRepository) Logout(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthentificationRepositoryMockRecorder) Logout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthentificationRepository)(nil).Logout), id)
}

// MockAuthentificationService is a mock of AuthentificationService interface.
type MockAuthentificationService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthentificationServiceMockRecorder
}

// MockAuthentificationServiceMockRecorder is the mock recorder for MockAuthentificationService.
type MockAuthentificationServiceMockRecorder struct {
	mock *MockAuthentificationService
}

// NewMockAuthentificationService creates a new mock instance.
func NewMockAuthentificationService(ctrl *gomock.Controller) *MockAuthentificationService {
	mock := &MockAuthentificationService{ctrl: ctrl}
	mock.recorder = &MockAuthentificationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentificationService) EXPECT() *MockAuthentificationServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthentificationService) Login(credentials domain.Credentials) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthentificationServiceMockRecorder) Login(credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthentificationService)(nil).Login), credentials)
}

// Logout mocks base method.
func (m *MockAuthentificationService) Logout(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthentificationServiceMockRecorder) Logout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthentificationService)(nil).Logout), id)
}
