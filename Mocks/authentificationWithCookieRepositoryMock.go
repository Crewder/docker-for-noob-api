// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/authentificationWithJWTPorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	http "net/http"
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthentificationWithCookieRepository is a mock of AuthentificationWithCookieRepository interface.
type MockAuthentificationWithCookieRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthentificationWithCookieRepositoryMockRecorder
}

// MockAuthentificationWithCookieRepositoryMockRecorder is the mock recorder for MockAuthentificationWithCookieRepository.
type MockAuthentificationWithCookieRepositoryMockRecorder struct {
	mock *MockAuthentificationWithCookieRepository
}

// NewMockAuthentificationWithCookieRepository creates a new mock instance.
func NewMockAuthentificationWithCookieRepository(ctrl *gomock.Controller) *MockAuthentificationWithCookieRepository {
	mock := &MockAuthentificationWithCookieRepository{ctrl: ctrl}
	mock.recorder = &MockAuthentificationWithCookieRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentificationWithCookieRepository) EXPECT() *MockAuthentificationWithCookieRepositoryMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthentificationWithCookieRepository) Login(credentials domain.Credentials) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthentificationWithCookieRepositoryMockRecorder) Login(credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthentificationWithCookieRepository)(nil).Login), credentials)
}

// Logout mocks base method.
func (m *MockAuthentificationWithCookieRepository) Logout(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthentificationWithCookieRepositoryMockRecorder) Logout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthentificationWithCookieRepository)(nil).Logout), id)
}

// MockAuthentificationWithCookieService is a mock of AuthentificationWithCookieService interface.
type MockAuthentificationWithCookieService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthentificationWithCookieServiceMockRecorder
}

// MockAuthentificationWithCookieServiceMockRecorder is the mock recorder for MockAuthentificationWithCookieService.
type MockAuthentificationWithCookieServiceMockRecorder struct {
	mock *MockAuthentificationWithCookieService
}

// NewMockAuthentificationWithCookieService creates a new mock instance.
func NewMockAuthentificationWithCookieService(ctrl *gomock.Controller) *MockAuthentificationWithCookieService {
	mock := &MockAuthentificationWithCookieService{ctrl: ctrl}
	mock.recorder = &MockAuthentificationWithCookieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthentificationWithCookieService) EXPECT() *MockAuthentificationWithCookieServiceMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthentificationWithCookieService) Login(credentials domain.Credentials) (http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", credentials)
	ret0, _ := ret[0].(http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthentificationWithCookieServiceMockRecorder) Login(credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthentificationWithCookieService)(nil).Login), credentials)
}

// Logout mocks base method.
func (m *MockAuthentificationWithCookieService) Logout(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthentificationWithCookieServiceMockRecorder) Logout(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthentificationWithCookieService)(nil).Logout), id)
}
