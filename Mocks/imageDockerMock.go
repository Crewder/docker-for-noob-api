// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/imageDockerPort.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerHubRepository is a mock of DockerHubRepository interface.
type MockDockerHubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDockerHubRepositoryMockRecorder
}

// MockDockerHubRepositoryMockRecorder is the mock recorder for MockDockerHubRepository.
type MockDockerHubRepositoryMockRecorder struct {
	mock *MockDockerHubRepository
}

// NewMockDockerHubRepository creates a new mock instance.
func NewMockDockerHubRepository(ctrl *gomock.Controller) *MockDockerHubRepository {
	mock := &MockDockerHubRepository{ctrl: ctrl}
	mock.recorder = &MockDockerHubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerHubRepository) EXPECT() *MockDockerHubRepositoryMockRecorder {
	return m.recorder
}

// GetImages mocks base method.
func (m *MockDockerHubRepository) GetImages() (domain.DockerImagesParse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].(domain.DockerImagesParse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockDockerHubRepositoryMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockDockerHubRepository)(nil).GetImages))
}

// GetTagReference mocks base method.
func (m *MockDockerHubRepository) GetTagReference(image, tag string) (domain.ImageReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagReference", image, tag)
	ret0, _ := ret[0].(domain.ImageReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagReference indicates an expected call of GetTagReference.
func (mr *MockDockerHubRepositoryMockRecorder) GetTagReference(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagReference", reflect.TypeOf((*MockDockerHubRepository)(nil).GetTagReference), image, tag)
}

// HandleMultipleGetTagReference mocks base method.
func (m *MockDockerHubRepository) HandleMultipleGetTagReference(languageName string, allTags []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMultipleGetTagReference", languageName, allTags)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleMultipleGetTagReference indicates an expected call of HandleMultipleGetTagReference.
func (mr *MockDockerHubRepositoryMockRecorder) HandleMultipleGetTagReference(languageName, allTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMultipleGetTagReference", reflect.TypeOf((*MockDockerHubRepository)(nil).HandleMultipleGetTagReference), languageName, allTags)
}

// Read mocks base method.
func (m *MockDockerHubRepository) Read(image, tag string) (domain.DockerImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", image, tag)
	ret0, _ := ret[0].(domain.DockerImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDockerHubRepositoryMockRecorder) Read(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDockerHubRepository)(nil).Read), image, tag)
}

// MockRedisRepository is a mock of RedisRepository interface.
type MockRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRedisRepositoryMockRecorder
}

// MockRedisRepositoryMockRecorder is the mock recorder for MockRedisRepository.
type MockRedisRepositoryMockRecorder struct {
	mock *MockRedisRepository
}

// NewMockRedisRepository creates a new mock instance.
func NewMockRedisRepository(ctrl *gomock.Controller) *MockRedisRepository {
	mock := &MockRedisRepository{ctrl: ctrl}
	mock.recorder = &MockRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisRepository) EXPECT() *MockRedisRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRedisRepository) Add(key string, value interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", key, value)
}

// Add indicates an expected call of Add.
func (mr *MockRedisRepositoryMockRecorder) Add(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRedisRepository)(nil).Add), key, value)
}

// FindDockerImageResult mocks base method.
func (m *MockRedisRepository) FindDockerImageResult(key string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDockerImageResult", key)
	ret0, _ := ret[0].([]string)
	return ret0
}

// FindDockerImageResult indicates an expected call of FindDockerImageResult.
func (mr *MockRedisRepositoryMockRecorder) FindDockerImageResult(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDockerImageResult", reflect.TypeOf((*MockRedisRepository)(nil).FindDockerImageResult), key)
}

// ImageExist mocks base method.
func (m *MockRedisRepository) ImageExist(image, tag string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageExist", image, tag)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ImageExist indicates an expected call of ImageExist.
func (mr *MockRedisRepositoryMockRecorder) ImageExist(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageExist", reflect.TypeOf((*MockRedisRepository)(nil).ImageExist), image, tag)
}

// Read mocks base method.
func (m *MockRedisRepository) Read(image, tag string) (domain.DockerImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", image, tag)
	ret0, _ := ret[0].(domain.DockerImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRedisRepositoryMockRecorder) Read(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRedisRepository)(nil).Read), image, tag)
}

// MockImageDockerService is a mock of ImageDockerService interface.
type MockImageDockerService struct {
	ctrl     *gomock.Controller
	recorder *MockImageDockerServiceMockRecorder
}

// MockImageDockerServiceMockRecorder is the mock recorder for MockImageDockerService.
type MockImageDockerServiceMockRecorder struct {
	mock *MockImageDockerService
}

// NewMockImageDockerService creates a new mock instance.
func NewMockImageDockerService(ctrl *gomock.Controller) *MockImageDockerService {
	mock := &MockImageDockerService{ctrl: ctrl}
	mock.recorder = &MockImageDockerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageDockerService) EXPECT() *MockImageDockerServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockImageDockerService) Get(image, tag string) (domain.DockerImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", image, tag)
	ret0, _ := ret[0].(domain.DockerImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImageDockerServiceMockRecorder) Get(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImageDockerService)(nil).Get), image, tag)
}

// GetAllTagsFromImageVersion mocks base method.
func (m *MockImageDockerService) GetAllTagsFromImageVersion(image, version string) ([]domain.ImageNameDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTagsFromImageVersion", image, version)
	ret0, _ := ret[0].([]domain.ImageNameDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTagsFromImageVersion indicates an expected call of GetAllTagsFromImageVersion.
func (mr *MockImageDockerServiceMockRecorder) GetAllTagsFromImageVersion(image, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTagsFromImageVersion", reflect.TypeOf((*MockImageDockerService)(nil).GetAllTagsFromImageVersion), image, version)
}

// GetAllVersionsFromImage mocks base method.
func (m *MockImageDockerService) GetAllVersionsFromImage(image string) (domain.DockerImageVersions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllVersionsFromImage", image)
	ret0, _ := ret[0].(domain.DockerImageVersions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllVersionsFromImage indicates an expected call of GetAllVersionsFromImage.
func (mr *MockImageDockerServiceMockRecorder) GetAllVersionsFromImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllVersionsFromImage", reflect.TypeOf((*MockImageDockerService)(nil).GetAllVersionsFromImage), image)
}

// GetImages mocks base method.
func (m *MockImageDockerService) GetImages() (domain.DockerImagesParse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].(domain.DockerImagesParse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockImageDockerServiceMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageDockerService)(nil).GetImages))
}
