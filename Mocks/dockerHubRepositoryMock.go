// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/dockerHubPorts.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/docker-generator/api/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockDockerHubRepository is a mock of DockerHubRepository interface.
type MockDockerHubRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDockerHubRepositoryMockRecorder
}

// MockDockerHubRepositoryMockRecorder is the mock recorder for MockDockerHubRepository.
type MockDockerHubRepositoryMockRecorder struct {
	mock *MockDockerHubRepository
}

// NewMockDockerHubRepository creates a new mock instance.
func NewMockDockerHubRepository(ctrl *gomock.Controller) *MockDockerHubRepository {
	mock := &MockDockerHubRepository{ctrl: ctrl}
	mock.recorder = &MockDockerHubRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerHubRepository) EXPECT() *MockDockerHubRepositoryMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockDockerHubRepository) Read(image, tag string) (domain.DockerHubResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", image, tag)
	ret0, _ := ret[0].(domain.DockerHubResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockDockerHubRepositoryMockRecorder) Read(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockDockerHubRepository)(nil).Read), image, tag)
}

// MockDockerHubService is a mock of DockerHubService interface.
type MockDockerHubService struct {
	ctrl     *gomock.Controller
	recorder *MockDockerHubServiceMockRecorder
}

// MockDockerHubServiceMockRecorder is the mock recorder for MockDockerHubService.
type MockDockerHubServiceMockRecorder struct {
	mock *MockDockerHubService
}

// NewMockDockerHubService creates a new mock instance.
func NewMockDockerHubService(ctrl *gomock.Controller) *MockDockerHubService {
	mock := &MockDockerHubService{ctrl: ctrl}
	mock.recorder = &MockDockerHubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerHubService) EXPECT() *MockDockerHubServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDockerHubService) Get(image, tag string) (domain.DockerHubResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", image, tag)
	ret0, _ := ret[0].(domain.DockerHubResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDockerHubServiceMockRecorder) Get(image, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDockerHubService)(nil).Get), image, tag)
}
